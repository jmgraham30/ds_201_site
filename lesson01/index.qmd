---
title: "Lesson 1"
subtitle: "Getting Into Data"
author: "JMG"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson01.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| echo: false
#| message: false
#| warning: false

# load packages used in document
library(tidyverse)
library(gapminder)
library(kableExtra)
```


## Learning Objectives

After this lesson, students will be able to: 

* Give a general definition of **data science**.

* Explain what is meant by **reproducible** and **auditable** workflows.

* Use the [Gapminder](https://www.gapminder.org/) online tools ( [view website](https://www.gapminder.org/)) to explore data on certain social and economic issues.

* Explain and give examples of **numerical** and **categorical** data types.  

* Do basic arithmetic with R. 

## Readings, etc.

For this lesson, refer to the following readings, etc.:

* Read the preface of *Data Science: A First Introduction* by Tiffany Timbers, Trevor Campbell, and Melissa Lee [@timbers2022data]. [View the free online version of the text.](https://datasciencebook.ca/).

* Skim the README for the [Tidy Tuesday data repository](https://github.com/rfordatascience/tidytuesday) [@TT]. [View the repository.](https://github.com/rfordatascience/tidytuesday) Throughout the semester, we will use example data from the Tidy Tuesday data repository.

## Course Overview

This course provides an introduction to data science. Broadly, we will cover concepts, skills, and methods for gaining insight from data. The things you learn in the class will be applicable in a variety of different areas, professions, and even other courses. 

There is a website for the course, [view the course website](https://intro-ds.netlify.app/). For course logistics, see the official course syllabus, [view the syllabus website](https://intro-ds.netlify.app/syllabus.html). Assignments and other information specific to the course in a given semester will be posted on the course learning management system (LMS). The course website provides links to many additional resources, [view the links page](https://intro-ds.netlify.app/links.html).

While we will regularly refer to several texts (most of which have been published online as open access materials) throughout the course, most of the content will be delivered via "notebooks" like the one you're reading now[^1] that intermix text, mathematical notation, figures, media, programming language code, and web links. In some cases, you will be asked to go through the notebooks on your own and sometimes we will go through the notebooks together during class. Either way, any time you encounter code in a notebook, it is expected that you will take the time to run any code (mostly by copying and pasting) for yourself. The only way to master the material is through active participation.  

[^1]: The notebooks are created using [Quarto](https://quarto.org/) and [R markdown](https://rmarkdown.rstudio.com/), topics that we will cover in more detail later. 

## What is Data Science?

For this course, we think of **data science** as a methodology or set of methodologies for gaining insight from data. Data can be pretty much any type of organized information. In this course, data will often be organized in a tabular format such as is common with spreadsheets. However, text, images, videos, and sound are other types of data that data scientists often work with. Further, data may have a temporal or spatial component. 

It is important to note that data science is an interdisciplinary endeavor. Data science brings together mathematics and statistics, computer science and machine learning, and a domain of application or expertise. This is illustrated by @fig-ds. 

[![Data science is an inherently interdisciplinary field.](https://miro.medium.com/v2/resize:fit:730/0*POjH5vv_7t8s8loG?raw=1){#fig-ds fig-alt="Figure showing data science as an interdisciplinary field at the intersection of mathematics, computer science, and domain expertise."}](https://www.google.com/url?sa=i&url=https%3A%2F%2Fmedium.com%2Fanalytics-vidhya%2Fintroduction-to-data-science-28deb32878e7&psig=AOvVaw1btLUApoKBhzFSVMGvfq1p&ust=1685887947873000&source=images&cd=vfe&ved=0CBAQjRxqFwoTCMiQ8ZOkp_8CFQAAAAAdAAAAABAE)


### Data Science Workflow

In this course, we emphasize a certain workflow for typical data science tasks. Generally, the steps in the workflow are:

1) Gather data with the goal of using it to gain insight to answer questions or address problems in a specific domain of application. 

2) Document the data and data collection process. 

    * It is important to think carefully about the type of data that is collected and how the data is generated and collected. Data is often generated or collected in such a way that it will contain or reflect biases, misinformation, incomplete information, or other problematic features. When you use data or models to make a decision, the problematic features of the data may influence the decision made with unforeseen negative consequences. See *The Alignment Problem* by Brian Christian for a thoughtful discussion on the issues related to these types of considerations [@christian2020alignment].  

3) Import the data for analysis. 

4) Explore and clean the data. Data visualization is essential at this step. 

5) Generate initial insight or more detailed questions. 

6) Decide what type(s) of analysis or analyses are to be performed. 

    * Make sure to clearly state what the goals of an analysis are. There are several different types of analyses of data that are common to conduct. See [Table 1.1](https://datasciencebook.ca/intro.html#tab:questions-table) from [@timbers2022data] for a list of these typical analysis types with corresponding examples of questions appropriate for a particular type of analysis, link to table [here](https://datasciencebook.ca/intro.html#tab:questions-table).

7) Assess the analysis. 

8) At this stage, it may be necessary to repeat steps 1 - 7.

9) Report your findings/results documenting each step in the analysis, and state your conclusions in the context of the question, problem, or application that motivated your analysis. 


It is essential the our data science workflow be **reproducible** and **auditable**. That is, each step in a data analysis should be accessible and understandable to others (auditability) and anyone with access to your analysis should be able to re-run the analysis from start to finish and get the same result you did (reproducibility).  @fig-reproducible illustrates the concept of reproducibility. 

[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/rstats-artwork/reproducibility_court.png?raw=1){#fig-reproducible fig-alt="An illustration of the concept of reproducibility."}](https://allisonhorst.com/)


## Exploring Data: An Introduction Through Gapminder 

Let's begin our adventure in data science by engaging with some of the interactive tools on the [Gapminder](https://www.gapminder.org/) website, [View Gapminder](https://www.gapminder.org/). The Gapminder organization is a non-profit entity that seeks to use data to educate people about large-scale social issues. Gapminder has a particular focus on addressing certain types of common misconceptions about the world. 



[View the interactive data tools by Gapminder.](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v1)

**Question:** What information is conveyed by the visualization shown at [this link](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v1)? How are colors used in the visualization? 

**Question** What is the relationship between income and life expectancy based on the initial bubble plot? How do income and life expectancy each  change over time? Does the relationship between income and life expectancy change over time? 

**Question:** Do you think the visualizations on the Gapminder sight are useful and effective? If so, what makes them useful or effective. If not, what changes would you make to make them more useful or effective? 

## Classification of Basic Data Types

A small portion of the data available from Gapminder is shown in @tbl-gp below: [^2]

```{r}
#| label: tbl-gp
#| tbl-cap: Portion of the Gapminder data set
#| echo: false

head(gapminder) %>%
  kable()
```

[^2]: This data is made available in R through the `gapminder` package. In order to access this data in R, is it necessary to install and load the `gapminder` package. We will discuss installing and loading R packages in detail soon. 

There are several useful things to note about this data:

1. Each row corresponds to a unique observation.

2. Each column is a unique feature or variable. 

3. Every cell contains a single value.

4. Some of the information in the data set is quantitative while other information is qualitative. 

A data set that satisfies properties 1 - 3 is said to be **tidy** or in tidy format. We will often find it very useful to work with data that conforms to the tidy format. 

We refer to variables made up of quantitative information as **numerical** and variables made up of qualitative information as **categorical**. For example, in the Gapminder data, the country and continent variables are categorical while the year, life expectancy, population, and per capita GDP are all numerical variables. The type of variable(s) often influences the type of visualization or analysis that is used to explore and model data. 

We can further classify the type of a variable by the following classifications:

1. Numerical (quantitative):

    * Continuous:  Can take on any value (possibly over a specific range) and any value between two values. Typically will involve decimal values. Physical measurements are common types of continuous numerical data. 
    
    * Discrete: Any numerical type that is not continuous. Often whole numbers. Counts are a common type of discrete numerical data.
    
2. Categorical (qualitative):

    * Nominal: Lacks any particular ordering. For example, eyecolor would be nominal categorical data. 
    
    * Ordinal: Possesses a particular ordering. For example, the place (first, second, third, etc.) that a sports team comes in at the end of a competition or tournament. 
    
    * Binary: A categorical variable with only two possible outcomes. Think yes/no, true/false, etc. 
    
@fig-numericals illustrates numerical variables and the distinction between continuous and discrete numerical variables, while @fig-categoricals illustrates categorical variables and the distinction between nominal, ordinal, and binary categorical variables.  

[![Numerical variables and the distinction between a continuous numerical variable and a discrete numerical variable. Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/other-stats-artwork/continuous_discrete.png?raw=1){#fig-numericals fig-alt="An illustration of the distinction between a continuous numerical variable and a discrete numerical variable."}](https://allisonhorst.com/)


[![ Categorical variables and the distinction between nominal, ordinal, and binary categorical variables. Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/other-stats-artwork/nominal_ordinal_binary.png?raw=1){#fig-categoricals fig-alt="An illustration of the distinction between nominal, ordinal, and binary categorical variables."}](https://allisonhorst.com/)

One thing to be careful about is that numbers can and often are used to label the outcomes for a categorical variable. For example, suppose we collect data about students living in a particular dormitory. We may use 1 to denote that a student is enrolled as a first-year student, 2 to denote that a student is enrolled as a second-year student, etc. Even though we've used number, the year a student is enrolled as is really a categorical variable.     

Sometimes, there may even be an ambiguity in the type for a variable. For example, suppose we are collecting data on commercial buildings in a particular city and for each building in the data set, we record (among other things) the number of stories of the building using 1 to denote a building with one story, 2 to denote a building with two stories, etc. On the one hand, we could view our stories variable as a count and hence a discrete numerical variable. On the other hand, it might be better to think of the stories variable as a ordinal categorical variable. One way to decide which is more appropriate is to think about if it makes sense or is desirable to take a average or not. If you want to take a average, then the variable must be numerical.     

## A Tiny Bit of `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")`

[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/rstats-artwork/exploder.gif?raw=1){fig-alt="A gif showing the logo for the R language for statistical computing."}](https://allisonhorst.com/)

### Why R?

The [R language](https://www.r-project.org/) [@r2023] for statistical computing is one of the most popular computing tools for data science, among the other [most popular](https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022) are [Python](https://www.python.org/) and [Julia](https://julialang.org/). Some of the strengths of R include

* free and open source which facilitates reproducibility and auditability, 

* ecosystem of packages that greatly extend the functionality of R,

* [rmarkdown](https://rmarkdown.rstudio.com/) [@rmarkdown2020] and [Quarto](https://quarto.org/) frameworks for [literate programming](https://en.wikipedia.org/wiki/Literate_programming) enable presentation and communication of data analyses and facilitate reproducibility and auditability, 

* [RStudio](https://posit.co/download/rstudio-desktop/) [integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment) (IDE) by [Posit](https://posit.co/) enhances programming, RStudio also supports other languages like Python and Julia making it possible to work across different languages, 

* a strong and collaborative user community, see R Community Explorer website, [view the website.](https://r-community.org/usergroups/). 

As the course progresses, we will learn a lot of R. For this lesson, we will start with something very simple, that is, doing basic calculations with R. 

### Calculations with R

In R, it is easy to perform basic arithmetic operations such as addition, subtraction, multiplication, division, exponentiation, and modular division. Each of these is illustrated in the following code blocks:

```{r}
#| code-fold: false


# any line starting with # is a comment and is not run
# addition
1.6 + 2.31
```


```{r}
#| code-fold: false


# subtraction
4.87 - 2.31
```



```{r}
#| code-fold: false


# multiplication
1.6 * 2.31
```


```{r}
#| code-fold: false


# division
6.0 / 2.31
```


```{r}
#| code-fold: false


# exponentiation
2^3
```


```{r}
#| code-fold: false


# modular division, a %% b returns the remainder after
# dividing a by b

7 %% 2
```


You have to be careful with the order of operations, use parentheses to be precise about intended order of operations. For example,

```{r}
#| code-fold: false

(6 / 3) - 1
```

divides 6 by three and then subtracts 1, while

```{r}
#| code-fold: false

6 / (3 - 1)
```

subtracts 1 from 3 and divides 6 by the result. While the following code runs and has a specific meaning to the computer, it is ambiguous to the human reader and should be modified appropriately with parentheses:

```{r}
#| code-fold: false

6 / 3 - 1
```


### Variables and Assignment

In R programming, a variable is a name given to a R object such as a numeric value that can be used to store, reuse, or modify that object. In R, variable assignments are made use the assignment operator `<-`. For example, 

```{r}
#| code-fold: false

my_variable <- 2.5
```

assigns the numeric value 2.5 to the variable `my_variable`. Now, we can peform operations to `my_variable`, for example, 

```{r}
#| code-fold: false

(2 * my_variable)

(my_variable^3)

```

Many programming languages use `=` for assignment. While it is valid to use `=` in R, best practices dictate using `<-`.   

See the tidyverse style guide [here](https://style.tidyverse.org/syntax.html) for best practices in naming objects in R. 

If you want to engage further with R programming, we highly recommend the [swirl](https://swirlstats.com/) package [@swirl2020] for learning R in R. To install, load, and use swirl, run the following commands in the R console:

```{r}
#| echo: true
#| code-fold: false
#| eval: false

# install swirl
install.packages("swirl") # only need to run once
# load swirl 
library(swirl) # must run in every new R session
# start swirl
swirl()
```


## Some Data Resources

For future reference, we list some resources that might be useful for finding data sets to work with throughout the course. 

* [Gapminder](https://www.gapminder.org/) and the `gapminder` R package.

* [UCI machine learning repository](https://archive.ics.uci.edu/)

* [Kaggle](https://www.kaggle.com/)

* [Tidy Tuesday data repository](https://github.com/rfordatascience/tidytuesday)

* [Appendix B](https://tellingstorieswithdata.com/21-datasets.html) of [*Telling Stories with Data*](https://tellingstorieswithdata.com/) [@alexandertelling] lists a large number of data resources

## Preparation for the next lesson

Prior to starting the next lesson, please read [Chapter 1](https://datasciencebook.ca/intro.html) of [@timbers2022data], link [here](https://datasciencebook.ca/intro.html). It is also recommended that you read the section on [reproducible workflows](https://tellingstorieswithdata.com/03-workflow.html) from [@alexandertelling], link [here](https://tellingstorieswithdata.com/03-workflow.html)

## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)

