---
title: "Lesson 4"
subtitle: "Exploratory Data Analysis"
author: "JMG"
format:
  html:
    echo: true
    code-fold: false
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson04.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| echo: false
#| message: false
#| warning: false

# load packages used in document
library(tidyverse)
library(readxl)
library(gapminder)
library(kableExtra)
library(magick)
library(canlang)
library(forcats)
library(patchwork)
library(lubridate)
library(cowplot)

theme_set(theme_minimal(base_size=12))

aboriginal_lang <- filter(can_lang, category == "Aboriginal languages")
selected_lang <- select(aboriginal_lang, language, mother_tongue)
arranged_lang <- arrange(selected_lang, by = desc(mother_tongue))
ten_lang <- slice(arranged_lang, 1:10)

# read in data files
#happiness_report_csv <- read_csv("https://raw.githubusercontent.com/UBC-DSCI/data-science-a-first-intro-worksheets/main/worksheet_reading/data/happiness_report.csv")
#happiness_report_xl <- read_xlsx("/Users/jasongraham/Library/CloudStorage/Dropbox/WorkDocuments/Teaching/Falls/Fall2023/DS 201/happiness_report.xlsx")
```


## Learning Objectives

After this lesson, students will be able to: 

- Choose an appropriate visualization for exploring and summarizing a tabular data set. 

- Use methods from the `ggplot2` package to create  an appropriate visualization for exploring and summarizing a tabular data set. 

- Apply steps from exploratory data analysis to generate or refine questions about a data set. 


## Readings, etc.

For this lesson, refer to the following readings, etc.:

- Chapters 2 and 11 from [R for Data Science](https://r4ds.hadley.nz/) [@wickham2023r]. [View book online](https://r4ds.hadley.nz/).

- Chapter 4 from [Data Science: A First Introduction](https://datasciencebook.ca/preface.html) [@timbers2022data]. [View book online](https://datasciencebook.ca/preface.html).


## Overview

An exploratory data analysis (EDA) is any initial investigation of a data set or data sets with the goal to simply see what is in the data and what questions one may ask from the data. 

**Important:** Every statistical or machine learning analysis should start with an EDA. 

Your goal during EDA is to develop an understanding of your data. Two major themes for EDA are:

1. To explore what type of variation occurs within variables.

2. To explore what type of covariation occurs between variables.

The two most important tools for EDA are

1. Numerical data summaries.

2. Visual data summaries.

In this lesson, we will first build our toolkit for EDA with a major focus on gaining tools and skills for data visualization. Then, we will work through some EDA case studies. 

## Introduction to Data Visualization


Most people process visual information quickly and easily. Few people can learn much at all by scrolling through a spreadsheet of  raw data. Thus, it is important for a data scientist to develop excellent skills in data visualization.
By data visualization, we mean the process of representing data via a visual format. 

In this course, we will utilize the `ggplot2` package (and maybe some packages that extend `ggplot2`) for data visualization [@wickham2016]. There are many excellent resources on data visualization. Two that are highly recommended and available for free online are [Data Visualization a Practical Introduction](https://socviz.co/) and [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) [@healy2018data; @wilke2019fundamentals]. [View Data Visualization a Practical Introduction](https://socviz.co/). [View Fundamentals of Data Visualization](https://clauswilke.com/dataviz/). Not only are these two books free, they also recent and utilize R and `ggplot2`. 

Data visualizations come with a risk of confusing people. Further, visualizations might not work well for everyone. So, it is very important to choose visualizations that are as clear, accessible, and clean as possible. For example, you should:

* Avoid the use of colors that are not easy to distinguish.

* Use appropriate scales. 

* Use alt-text and figure captions. 

There are other practices and techniques for making effective and accessible visualizations that we will discuss later. 


### `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` The `ggplot2` Package

The `ggplot2` package implements the **grammar of graphics**, a coherent system for describing and building graphs. With `ggplot2`, you can do more and faster by learning one system and applying it in many places.

@fig-ggplot2 shows the typical structure of the grammar of graphics as implemented in the `ggplot2` package[^1].

```{r, out.width="100%", fig.retina = 2}
#| label: fig-ggplot2
#| fig-cap:  The basic ggplot2 syntax. Figure source [@timbers2022data].
#| echo: false
#| message: false
#| warning: false
image_read("https://www.dropbox.com/scl/fi/6i7wc0126kw9vr5mr0iuv/ggplot_function.jpeg?rlkey=t2exo2hodawi3y0kgtco0l2eo&dl=1") |>
  image_crop("1625x1900")
```

[^1]: You can also use the pipe operator `%>%` (or even `|>`) to input a data frame into the first argument for the `ggplot` function. 

Let's see what happens when we run the commands from @fig-ggplot2.

```{r}
#| code-fold: false
#| label: fig-ten-lang
#| fig-cap: The bar plot resulting from running code explained in  @fig-ggplot2
#| fig-width: 10

ggplot(ten_lang, aes(x = language, y = mother_tongue)) +
  geom_bar(stat = "identity")

# the following code is equivalent
# ten_lang %>% 
#   ggplot(aes(x = language, y = mother_tongue)) +
#   geom_bar(stat = "identity")
  
```

Before we dive further into the details of using `ggplot2` and see more examples, let's think about what kinds of plots or graphs we might want to make. 

### Types of Plots

There are many different types of plots one can make so there isn't necessarily a unique choice to be made when deciding how to visualize data. However, there are a few considerations that will have a strong influence on what type of plot(s) you might create to visualize some data. 

Among the most important considerations is, the type of variable(s) involved in the parts of your data that you want to display visually. @tbl-basic-data-types lists the most common variable types. 

---------------------------------------------------------------------------------------------------------------------
Type of variable         Examples              Appropriate scale       Description
------------------------ --------------------- ----------------------- ----------------------------------------------
quantitative/numerical   1.3, 5.7, 83,         continuous              Arbitrary numerical values. These can be
continuous               1.5x10^-2^                                    integers, rational numbers, or real numbers.
 
quantitative/numerical   1, 2, 3, 4            discrete                Numbers in discrete units. These are most
discrete                                                               commonly but not necessarily integers.
                                                                       For example, the numbers 0.5, 1.0, 1.5 could
                                                                       also be treated as discrete if intermediate
                                                                       values cannot exist in the given dataset.
 
qualitative/categorical  dog, cat, fish        discrete                Categories without order. These are discrete
unordered                                                              and unique categories that have no inherent
                                                                       order. These variables are
                                                                       also called *factors*.
                                                                       
qualitative/categorical  good, fair, poor      discrete                Categories with order. These are discrete
ordered                                                                and unique categories with an order. For
                                                                       example, "fair" always lies between "good"
                                                                       and "poor". These variables are
                                                                       also called *ordered factors*.

date or time             Jan. 5 2018, 8:03am   continuous or discrete  Specific days and/or times. Also
                                                                       generic dates, such as July 4 or Dec. 25
                                                                       (without year).

text                     The quick brown fox   none, or discrete       Free-form text. Can be treated
                         jumps over the lazy                           as categorical if needed.
                         dog.
---------------------------------------------------------------------------------------------------------------------

: Types of variables encountered in typical data visualization scenarios, table from [@wilke2019fundamentals]. {#tbl-basic-data-types .striped .hover}

The reason why data types such as those listed in @tbl-basic-data-types influence the type of plot(s) used to display data is because the data type of a variable determines what kind of **aesthetics** can be used in a plot.  

By an aesthetic, we mean a visual element that can be used to describe aspects of a given graphic. @fig-common-aesthetics shows some common aesthetics for plots or graphs used in data visualization.  


```{r}
#| label: fig-common-aesthetics
#| fig-cap: Common aesthetics
#| echo: false
#| message: false
#| warning: false

aes_pos <- ggdraw() + 
  geom_segment(data = data.frame(x = c(0, 0.5),
                                 xend = c(1, 0.5),
                                 y = c(0.5, 0),
                                 yend = c(0.5, 1)),
                aes(x = x, y = y, xend = xend, yend = yend),
                arrow = arrow(length = grid::unit(12, "pt")), linewidth = .75) +
  draw_text("y", .5, 1, size = 12, vjust = 1, hjust = 2.5) +
  draw_text("x", 1, .5, size = 12, vjust = 2, hjust = 1) + 
  coord_cartesian(xlim = c(-.2, 1.2), ylim = c(-.2, 1.2))

aes_color <- ggdraw() +
  geom_tile(data = data.frame(x = 0.15 + .2333*(0:3)),
            aes(x, y = .5, fill = factor(x)), width = .2, height = .6) + 
  scale_fill_viridis_d()

aes_shape <- ggdraw() +
  geom_point(data = data.frame(x = (.5 + 0:3)/4),
             aes(x, y = .5, shape = factor(x)), size = 8, fill = "grey80") +
  scale_shape_manual(values = 21:24)

aes_size <- ggdraw() +
  geom_point(data = data.frame(x = (.5 + 0:3)/4),
             aes(x, y = .5, size = factor(x)), shape = 21, fill = "grey80") +
  scale_size_manual(values = c(2, 5, 8, 11))

aes_lwd <- ggdraw() +
  geom_segment(data = data.frame(x = rep(0.05, 4),
                                 xend = rep(0.95, 4),
                                 y = (1.5 + 0:3)/6,
                                 yend = (1.5 + 0:3)/6,
                                 linewidth = 4:1),
               aes(x = x, y = y, xend = xend, yend = yend, linewidth = linewidth)) +
  scale_size_identity()

aes_ltp <- ggdraw() +
  geom_segment(data = data.frame(x = rep(0.05, 4),
                                 xend = rep(0.95, 4),
                                 y = (1.5 + 0:3)/6,
                                 yend = (1.5 + 0:3)/6,
                                 linetype = 4:1),
               aes(x = x, y = y, xend = xend, yend = yend, linetype = linetype), linewidth = 1) +
  scale_linetype_identity()


plot_grid(aes_pos, aes_shape, aes_size,
          aes_color, aes_lwd, aes_ltp,
          ncol = 3,
          labels = c("position", "shape", "size", "color", "line width", "line type"),
          label_x = 0.05, label_y = 0.95, hjust = 0, vjust = 1)
```

Returning to @fig-ggplot2, we notice that one of the arguments that must be given to `ggplot` is `aes` which is short for aesthetic. 

@fig-plot-sketches show several of the most common types of plots for a single or pair of variables. These plot types are:

- **scatter plots** visualize the relationship between two quantitative variables
- **line plots** visualize trends with respect to an independent, ordered quantity (e.g., time)
- **bar plots** visualize comparisons of amounts
- **histograms** visualize the distribution of one quantitative variable (i.e., all its possible values and how often they occur) \index{distribution}

```{r}
#| label: fig-plot-sketches
#| fig-cap: Examples of scatter, line and bar plots, as well as histograms.
#| fig-width: 4.5
#| fig-height: 4.65
#| echo: false

set.seed(1)

scatter_plot <- tibble(x = seq(0.25, 10, by = 0.5) + rnorm(20, 1, 1.5),
                       y = seq(0.25, 10, by = 0.5) + rnorm(20, 1, 0.5)) |>
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  scale_x_continuous(limits = c(0, 12), breaks = seq(0, 12, by = 3)) +
  scale_y_continuous(limits = c(0, 12), breaks = seq(0, 12, by = 3)) +
  ggtitle("Scatter plot") +
  theme_classic()

line_plot <- tibble(x = seq(0.5, 10, by = 1) + rnorm(10, 1, 0.5),
                       y = seq(0.5, 10, by = 1) + rnorm(10, 1, 0.1)) |>
  ggplot(aes(x = x, y = y)) +
  geom_line() +
  scale_x_continuous(limits = c(0, 12), breaks = seq(0, 12, by = 3)) +
  scale_y_continuous(limits = c(0, 12), breaks = seq(0, 12, by = 3)) +
  ggtitle("Line plot") +
  theme_classic()

bar_plot <- tibble(count = c(35, 27, 21),
                   category = as_factor(c("Group 1", "Group 2", "Group 3"))) |>
  ggplot(aes(y = count, x = category)) +
  geom_bar(stat = "identity") +
  ggtitle("Bar plot") +
  theme_classic()

histogram_plot <- tibble(measurements = rnorm(200, 25, 5)) |>
  ggplot(aes(x = measurements)) +
  geom_histogram(binwidth = 3) +
  ggtitle("Histogram") +
  theme_classic()

plot_grid(scatter_plot,
          line_plot,
          bar_plot,
          histogram_plot,
          ncol = 2, 
          greedy = FALSE)
```

### Tips for Good Visualizations

We will soon learn how to make these types of plots and more with `ggplot2`. Before that, here is a list of tips for making sure that our visualizations are good:

- Make sure the visualization answers the question you have asked most simply and plainly as possible.
- Use legends and labels so that your visualization is understandable without reading the surrounding text.
- Ensure the text, symbols, lines, etc., on your visualization are big enough to be easily read.
- Ensure the data are clearly visible; don't hide the shape/distribution of the data behind other objects (e.g.,  a bar).
- Make sure to use color schemes that are understandable by those with
  colorblindness (a surprisingly large fraction of the overall 
  population&mdash;from about 1% to 10%, depending on sex and ancestry [@deebblind]).
  For example, [ColorBrewer](https://colorbrewer2.org) 
  and [the `RColorBrewer` R package](https://cran.r-project.org/web/packages/RColorBrewer/index.html) [@RColorBrewer] provide the 
  ability to pick such color schemes, and you can check your visualizations 
  after you have created them by uploading to online tools
  such as a [color blindness simulator](https://www.color-blindness.com/coblis-color-blindness-simulator/).
- Redundancy can be helpful; sometimes conveying the same message in multiple ways reinforces it for the audience.
- Use colors sparingly. Too many different colors can be distracting, create false patterns, and detract from the message. 
- Be wary of overplotting. Overplotting is when marks that represent the data
  overlap, and is problematic as it prevents you from seeing how many data
  points are represented in areas of the visualization where this occurs. If your
  plot has too many dots or lines and starts to look like a mess, you need to do
  something different.
- Only make the plot area (where the dots, lines, bars are) as big as needed. Simple plots can be made small.
- Don't adjust the axes to zoom in on small differences. If the difference is small, show that it's small!


If you're not sure what plot to make for your data, the [data-to-viz](https://www.data-to-viz.com/) website can be very helpful. [View the data-to-viz site](https://www.data-to-viz.com/). Once you know what type of plot to make, the [R Graph Gallery](https://r-graph-gallery.com/index.html) website is helpful for finding the ride code to make the plot with `ggplot2`. [View the R Graph Gallery ](https://r-graph-gallery.com/index.html)

## `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` Using the `ggplot2` Package

In this section, we will go through many use cases for `ggplot2`. For the examples and exercises in this section, we will work with three data sets:

- The `mpg` data set in the `ggplot2` package.

- The `diamonds` data set in the `ggplot2` package. 

- The [tornados](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-05-16/readme.md) data set from the Tidy Tuesday data repository.

To access the `mpg` and `diamonds` data sets, we just need to load the `ggplot2` package. To access the tornados data,  we need to load the `.csv` file which we do with the following code:

```{r}
#| code-fold: false

tornados <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-16/tornados.csv')

```


Let's look at the first few rows for each of the three data sets:

- `mpg`

```{r}
#| echo: false

mpg %>%
  head() %>%
  kable()
```

- `diamonds`

```{r}
#| echo: false

diamonds %>%
  head() %>%
  kable()
```


- `tornados`

```{r}
#| echo: false

tornados %>%
  head() %>%
  kable()
```

**Exercise:** For each variable in each of the three data sets, determine the appropriate data type. 


```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_histogram()
```



```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_histogram(fill="black")
```



```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_histogram(color="white")
```


```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_histogram(fill="purple",color="white",bins = 25) + 
  labs(x="Highway gas milage (mpg)",y="Count")
```


**Exercise:** Create a histogram for the `carat` variable in the `diamonds` data set. 


```{r}
mpg %>%
  ggplot(aes(y=hwy)) + 
  geom_boxplot()
```


```{r}
mpg %>%
  ggplot(aes(y=hwy,x=rep(1,nrow(mpg)))) + 
  geom_boxplot(outlier.shape = NA,color="orange") +
  geom_jitter(width = 0.2,alpha=0.5,color="darkgreen") + 
  labs(x="",y="Highway gas mileage (mpg)") +
  theme(axis.text.x = element_blank())

```




```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_density()
```




```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_density(linewidth=1)
```




```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_density(linewidth=1) + 
  geom_rug()
```



```{r}
mpg %>%
  ggplot(aes(x=hwy)) + 
  geom_histogram(aes(y = ..density..),fill="purple",color="white",bins = 25) + 
  geom_density(linewidth=1,color="gold") + 
  geom_rug()
```



```{r}
diamonds %>%
  ggplot(aes(cut)) + 
  geom_bar()
```


## EDA Case Studies

In this section, we will work through a couple of short EDA case studies. If you want to see and EDA live coded by a master data scientist, check out the following video:

* Exploratory data analysis worked example video by Hadley Wickham, [watch the video on YouTube](https://youtu.be/go5Au01Jrvs).

```{r}
#| echo: false

vembedr::embed_youtube(id="go5Au01Jrvs",height=450) %>%
  vembedr::use_align("center")
```



### EDA Case Study 1: 


### EDA Case Study 1: 


## Preparation for the next lesson

To prepare for the next lesson, please read:

- Chapter 26 from [R for Data Science](https://r4ds.hadley.nz/) [@wickham2023r]. [View book online](https://r4ds.hadley.nz/).

## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)


