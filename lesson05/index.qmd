---
title: "Lesson 5"
subtitle: "Intermediate programming for data science"
author: "JMG"
format:
  html:
    echo: true
    code-fold: false
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson05.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| include: false
#| message: false

library(tidyverse)
```

## Learning Objectives

After this lesson, students will be able to: 

- Write functions in R.

- Use `map` and other such functions from `purrr` for iteration. 


## Readings, etc.

For this lesson, refer to the following readings, etc.:

- [Chapter 26](https://r4ds.hadley.nz/functions) from [R for Data Science](https://r4ds.hadley.nz/) [@wickham2023r]. [View Chapter 26](https://r4ds.hadley.nz/functions).

- [Chapter 27](https://r4ds.hadley.nz/iteration) from [R for Data Science](https://r4ds.hadley.nz/) [@wickham2023r]. [View Chapter 27](https://r4ds.hadley.nz/iteration).


## Overview

Computer programming is the art and science of instructing computers to perform specific tasks or solve problems. It's like giving step-by-step directions to a computer to execute. Programmers use programming languages, which are like the computer's communication tools, to write code. This code is a set of instructions that tells the computer what to do. In the world of data science, programming is an essential skill because it allows you to manipulate, analyze, and visualize data efficiently. Learning to code empowers you to create software, build data models, and automate repetitive tasks, making it a fundamental skill for anyone aspiring to excel in the field of data science.

Two of the most important programming concepts are iteration and functions. Both **iteration** and **functions** save us time, iterations by allowing us to perform repetitive tasks without repeating a command, and  **functions** by allowing us to generalize commands/code and reuse code. In data science, iteration and functions are critical for tasks like data cleaning, analysis, and visualization. They enable us to process and analyze large datasets efficiently while maintaining clean, organized, and readable code.

In this lesson, we will learn how to implement functions and certain types of iteration in R. 


## `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` Functions in R

A **function**[^1] is a self-contained block of code that performs a specific task or set of tasks. Functions are fundamental to programming and are used to encapsulate and modularize code, making it more organized, reusable, and easier to maintain. Some reasons to write functions include:

[^1]: Here we use the word function in the context of computer programming and note in the mathematical sense. While there are important relationships between mathematical and programming functions, there are also some distinctions. Mathematical functions can be implemented as progamming functions but many programming functions aren't functions in the strict mathematical sense. 

1. Reusability: Functions in R allow you to encapsulate logic and reuse it throughout your code. This promotes code modularity, reduces redundancy, and simplifies maintenance.

2. Abstraction: Functions provide a level of abstraction, allowing you to focus on what a piece of code does rather than how it does it. This enhances code readability and comprehension.

3. Scoping: Lexical scoping in R enables functions to maintain their own environments, which is useful for creating closures and encapsulating state.

4. Extensibility: R's extensibility through user-defined functions enables you to tailor your code to specific tasks or domains, making it a versatile language for data analysis and statistics.

5. Error Handling: Functions in R can include error-handling mechanisms to gracefully handle unexpected situations, enhancing the robustness of your code.

6. Testing: Functions make it easier to write unit tests for your code, ensuring its correctness and reliability in data analysis pipelines.

7. Functional Programming: R supports functional programming paradigms, allowing you to use higher-order functions like `apply`, `lapply`, and `sapply`, which simplify data manipulation and analysis tasks. Further, the packages `purrr` and `furrr` enhance the use of functional programming in R.


> A good rule of thumb is to consider writing a function whenever youâ€™ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).

Here are the key components and characteristics of functions in R:

* Function Name: Every function in R has a name that uniquely identifies it. Function names can consist of letters, numbers, dots, and underscores but should not start with a number or contain spaces.

* Parameters (Arguments): Functions can accept zero or more parameters, also known as arguments. Parameters are values that you pass to the function, and the function can use these values to perform its tasks. Parameters are enclosed in parentheses following the function name.

* Function Body: The function body contains the actual code that defines what the function does. It consists of a sequence of R expressions and statements that are executed when the function is called. The function body is enclosed in curly braces `{}`.

* Return Value: Functions in R can return a value, which is the result of their computations. You specify the return value using the `return()` keyword. If a function doesn't explicitly use `return()`, it returns the value of the last evaluated expression by default.

Here's a basic example of a function in R that adds two numbers:

```{r}
add_numbers <- function(a, b) {
  result <- a + b
  return(result)
}
```

In this example:

* `add_numbers` is the function name.

* `(a, b)` are the function's parameters.

* The function body calculates the sum of `a` and `b` and assigns it to the variable result.

* The `return(result)` statement specifies that the function should return the value stored in result.

You can call this function with specific values for `a` and `b` to get the result:

```{r}
(result <- add_numbers(3, 5))
```


**Exercise:** Write an R function named `mult_numbers` that inputs two numbers and returns their product.

Let's examine some more examples of writing and working with functions together in an R session. 

## `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` Iteration with `purrr`

Functional programming, as implemented in R using packages like [`purrr`](https://purrr.tidyverse.org/), offers several advantages that make it particularly useful in data science:

1. Readability and Maintainability: Functional programming encourages writing code that is concise and easier to understand. It emphasizes the use of pure functions, which take inputs and produce outputs without modifying external state. This makes code more predictable and less prone to bugs, making it easier to maintain, especially in data science projects where the logic can become complex.

2. Modularity: Functional programming promotes modularity by breaking down complex operations into smaller, reusable functions. In data science, where you often perform similar data manipulations or analyses on different datasets, this modularity can save time and effort by allowing you to reuse code snippets efficiently.

3. Immutability: In functional programming, data is treated as immutable, meaning once created, it cannot be changed. Instead of modifying existing data, you create new data structures. In data science, this can help ensure data integrity and traceability, crucial for reproducible research.

4. Parallelization: Functional programming encourages the use of pure functions that don't rely on external state or side effects. This property makes it easier to parallelize code, taking advantage of multi-core processors for faster data processing, a significant benefit in data science, where working with large datasets can be time-consuming. The `future` and `furrr` packages implement parallel processing versions of the `map` family of functions. 

5. Error Handling: Functional programming encourages a more structured approach to error handling,  leading to more robust and predictable error handling in data analysis pipelines.

6. Functional Pipelines: Functional programming promotes the use of pipelines, where data flows through a series of transformations. This aligns well with the typical data preprocessing and analysis steps in data science. Libraries like purrr in R make it easy to build and read such pipelines, enhancing code clarity.

7. Data Transformation: In data science, you often need to perform various transformations on data, such as mapping, filtering, and summarizing. Functional programming's emphasis on these operations aligns well with the typical tasks in data cleaning and preprocessing.

8. Functional Libraries: R has a rich ecosystem of packages like `purrr`, `dplyr`, and `tidyr` that are designed with functional programming principles in mind. These packages provide powerful tools for data manipulation and analysis while promoting clean, readable code.

Let's see a very simple example of using `purrr`. Suppose we have a vector of numbers and we want to square each of them. One way to do this would is as follows:

```{r}
my_sqr <- function(x){
  return(x^2)
}

nums_to_square <- c(-1,4,6)

map(nums_to_square,my_sqr)

```

Note that `map` returns a list. What if we just wanted to return another vector? Since `my_sqr` returns numerical values, we could replace `map` with `map_dbl` like

```{r}
map_dbl(nums_to_square,my_sqr)
```

Now the result is a vector. There is a whoe family of different kinds of `map`-like functions. For example, there are `map`-type functions that return data frames and we will find these to be very useful in our later work. 

It's a good idea to examine the documentation for `purrr`, [view the documentation](https://purrr.tidyverse.org/).

**Exercise:** Write a function called `times_two` that inputs a number and returns double its value. Use `map_dbl` to multiply all the numbers from 1 to 6 by 2. 


Let's examine some more examples of using `purrr` methods together in an R session. 

## Preparation for the next lesson

To prepare for the next lesson, please read:

- [Chapter 10](https://datasciencebook.ca/inference.html) on statistical inference from [Data Science A First Introduction](https://datasciencebook.ca/preface.html) [@timbers2022data].


## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)


