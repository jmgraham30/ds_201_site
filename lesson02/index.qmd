---
title: "Lesson 2"
subtitle: "Loading Data"
author: "JMG"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson02.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| echo: false
#| message: false
#| warning: false

# load packages used in document
library(tidyverse)
library(readxl)
library(gapminder)
library(kableExtra)

# read in data files
happiness_report_csv <- read_csv("https://raw.githubusercontent.com/UBC-DSCI/data-science-a-first-intro-worksheets/main/worksheet_reading/data/happiness_report.csv")
happiness_report_xl <- read_xlsx("/Users/jasongraham/Library/CloudStorage/Dropbox/WorkDocuments/Teaching/Falls/Fall2023/DS 201/happiness_report.xlsx")
```


## Learning Objectives

After this lesson, students will be able to: 

* Set up an RStudio project.

* Work in a Quarto document.

* Read tabular data into R.

* Use the `glimpse` command and other R functions to examine data read into R.  

## Readings, etc.

For this lesson, refer to the following readings, etc.:

* Chapter 2 of *Data Science: A First Introduction* by Tiffany Timbers, Trevor Campbell, and Melissa Lee [@timbers2022data]. [View the free online version of the text.](https://datasciencebook.ca/).

* The TidyTuesday data repository [@TT].


## RStudio Projects

A RStudio project is simply a folder or directory on a computer that contains a `.Rproj` file. A project makes it so that your work has its own working directory, workspace, history, and source documents. Using a project facilitates reproducible and auditable analyses because it keeps all the relevant files for a specific analysis together in one place making it easier to share. A RStudio project should correspond to a single project that you are working on. For example, you should use a RStudio project for your semester project for the course. 

The instructions for how to create a project are given in the online Posit support documents, [view the projects webpage](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects#:~:text=To%20create%20a\%20new%20project,extension%29%20within%20the%20project%20directory.). Alternatively, [view this video](https://youtu.be/WyrJmJWgPiU?si=qSgJRZD4YCKy3pHL):

```{r}
#| echo: false

vembedr::embed_youtube(id="WyrJmJWgPiU?si=qSgJRZD4YCKy3pHL",height=450) %>%
  vembedr::use_align("center")
```



### Some Project Tips and Tricks

1. When you create a project, the name of your project and the name of the corresponding folder will be the same so, use good naming conventions for projects. In particular, avoid the use of spaces or symbols. Make sure the name is descriptive and easy to remember but not too long. 

2. If there is data for your project, it is useful to create a subfolder of your package folder called `data` where you should save all the data files relevant to your project. 

3. If your project involves a lot of coding in R, its a good idea to create a subfolder of your package folder called `R` where you should save all the R script files relevant to your project. 

## Quarto Documents

[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is a programming practice in which the programmer includes computer code, normal text, figures, mathematical notation, etc. together into a single document. The approach is routinely in data science for the purposes of reproducible research. There are several tools for literate programming that are very popular among data scientists. These include but are not limited to [Jupyter notebooks](https://jupyter.org/) and [rmarkdown](https://rmarkdown.rstudio.com/).

A very recent addition to the literate programming toolkit is [Quarto](https://quarto.org/). Quarto brings together Jupyter notebooks, rmarkdown, and a number of other features. Throughout this course we will use Quarto which is included with the most recent versions of RStudio. To start using Quarto, we recommend:

*  Getting started with Quarto YouTube video, [watch the video on YouTube](https://youtu.be/YK6IjJkjkiI).
  
```{r}
#| echo: false

vembedr::embed_youtube(id="_f3latmOhew",height=450) %>%
  vembedr::use_align("center")
```

In class, we will go through the steps of creating a RStudio project and a Quarto document together. 

## Reading Data into R

### Basic Concepts

The main focus of this lesson is to show different common ways to read tabular data into R. Recall that tabular data is data that corresponds to a spreadsheet in which data is arranged into columns and rows. There are three basic things you need to know to read data into R:

1. The data format and file type.

For data to be tabular in structure, one must use some method to distinguish entries that belong to different columns and rows. The two most common ways are to separate entries using either a comma or a tab. Tabular data formatted using comma-separated values are saved as `.csv` files while tabular data formatted using tab-separated values are save as `.tsv` files. The other very common way to format and save tabular data is using Excel spreadsheets. 

2. Where the data is saved and will be read in from.

There are two basic locations in which one may save and store a data file: locally on a computer, remotely. To read in data that is stored locally on a computer that you have direct access to, you just need to know the path to the data file that you want to read in. To read in data that is stored remotely, you need to know the url address for the remote location of the data. 

3. The appropriate R function to use depending on the 1. and 2.

The `readr` package included as part of the `tidyverse` family of R packages contains functions `read_csv` and `read_tsv` for reading in `.csv` or `.tsv` files, respectively. The `readxl` package contains functions that can be used to read in tabular data formatted and saved as Excel spreadsheets. 

**Note:** There are also many other data structures, file types, and R packages or functions for reading in data. We can't possibly cover all the possible variations in class but once you know how to read in one data type into R, it is usually straightforward to figure out how to do it with some other data or file type. 

### Examples

The following examples assume that you are working in an active RStudio project that contains a subfolder titled `data` and that you have downloaded and saved the files `happiness_report.csv` and `happiness_report.xlsx` to the data folder. These are all data files for tabular data that ranks countries on happiness based on rationalized factors like economic growth, social support, etc. The data was released by the United Nations at an event celebrating International Day of Happiness. 

Before we can read these data files into R, we need to make sure that we install and load `readr` and `readxl`. Remember that `readr` is part of the `tidyverse` which we have already installed so you probably only need to install `readxl`. Once you have done this, you can create and run an R code chunk with the following:

```{r}
#| eval: false
#| echo: true
#| code-fold: false


# load necessary packages
library(tidyverse)
library(readxl)
```

Now, let's read in the data saved in the files `happiness_report.csv` and `happiness_report.xlsx`.

```{r}
#| eval: false
#| code-fold: false

# read in data files
happiness_report_csv <- read_csv("data/happiness_report.csv")
happiness_report_xl <- read_xlsx("data/happiness_report.xlsx")
```

Notice that we have assigned our data to a variable after having read it in. 

It is important to confirm that we have read in what we actually wanted. There are a number of ways to confirm that the data read into R makes sense:

1. The `dim` command will tell us the number of rows and columns for the data set we read in. 

2. The `glimpse` command from the `dplyr`  package (included with `tidyverse`) will show a glimpse of what is in the data. Specifically, `glimpse` displays a transposed version of you tabular data along with the number of rows and columns. This command even tells you valuable information about what type of data you have in each column. This is an extremely useful function and it is recommended that you use it immediately after reading in data. 

3. The `head` (`tail`) commands will display the first (last) few rows of a data set.

4. The `View` command will bring up a full view of you data in a new tab in R studio. This is basically like pulling up an Excel spreadsheet in RStudio. You probably want to avoid using this function on anything other than small or maybe moderately sized data sets. 

5. The `summary` function in base R will provide a descriptive summary of each column in a data set. 

6. The `skim` function from the `skimr` package quickly provides a broad overview of a data set. It's basically a souped-up version of `summary`.

Here are the results of each of these commands (except View) run on the data read in from the `.csv` file:

```{r}
#| echo: true
#| code-fold: false

dim(happiness_report_csv)
```


```{r}
#| echo: true
#| code-fold: false

glimpse(happiness_report_csv)
```


```{r}
#| echo: true
#| code-fold: false

head(happiness_report_csv)
```


```{r}
#| echo: true
#| code-fold: false

tail(happiness_report_csv)
```


```{r}
#| echo: true
#| code-fold: false
#| eval: false

View(happiness_report_csv)
```


```{r}
#| echo: true
#| code-fold: false

summary(happiness_report_csv)
```


```{r}
#| echo: true
#| code-fold: false

skimr::skim(happiness_report_csv)
```

**Question:** What useful information is provided by the output from each of these commands?

**Exercise:** Run all these commands on the data that you read in from the Excel spreadsheet.  

We end this section by noting that the data file `happiness_report.csv` is also stored in a remote repository, [view the repository](https://github.com/UBC-DSCI/data-science-a-first-intro-worksheets/blob/main/worksheet_reading/data/happiness_report.csv). Since this repository has a corresponding url address, we can read the data in directly from the web:

```{r}
#| message: false
#| warning: false
#| code-fold: false

happiness_report_csv_url <- read_csv("https://raw.githubusercontent.com/UBC-DSCI/data-science-a-first-intro-worksheets/main/worksheet_reading/data/happiness_report.csv")
```

**Warning:** There is one thing you have to be careful about when reading in remote data. You need to make sure you are reading in from the link corresponding to the **raw** data file and not the one that has been rendered for visual display. 

**Exercise:** Use one or more of the commands we have covered to make sure that this has read in the data you want. 

## Some Data Sources

One thing students often struggle with is finding and picking a good data set for their projects. Appendix B of the online textbook contains a very helpful list of data sources [@alexandertelling]. [View appendix B](https://tellingstorieswithdata.com/21-datasets.html). Two other very interesting and useful sources of data are the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) data repositories and [Kaggle](https://www.kaggle.com/). There are also many R packages that either include data or that can be used to download data. The ROpenSci project is a godo resource for finding R packages that can be used to obtain data, [view the project](https://ropensci.org/).

## `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` Vectors, Lists, and Data Frames

When tabular data is read into R from a file such as a `.csv` or an Excel spreadsheet it is represented in R by a particular data type. Specifically, tabular data in R is represented by a `data frame` or `tibble`. While we don't want to spend too much time on the technicalities of R objects, it is useful to have a brief introduction to the vector, list, and data frame objects in R. If you want to see more details then we present here, see [Chapter 5](https://rstudio-education.github.io/hopr/r-objects.html) of [@grolemund2014hands], which is freely available online. [View Chapter 5](https://rstudio-education.github.io/hopr/r-objects.html). 

### Vectors in R

In our last class, we were exposed to vectors in R through the first lesson in the *R Programming* swirl available through the `swirl` package. The most important thing to remember about vectors in R is

1. How to create them.

2. That a vector can only hold values of the same type. 

For example, we can create a vector with three numeric values and store it as a variable `my_num_vect` using

```{r}
#| code-fold: false

(my_num_vect <- c(1.2,6.8,-13.9))
```

We can create a vector with three character values and store it as a variable `my_chr_vect` using

```{r}
#| code-fold: false

(my_chr_vect <- c("dog","cat","bird"))
```

but we **cannot** create a vector that contains two numbers and one character. That is, we can't mix types in a vector. Let's see what happens if we try it:

```{r}
#| code-fold: false

(my_mix_vect <- c(3.14,"cat","bird"))
```


**Exercise:** Examine the output from the last command and explain what happened.

Note that you can determine the type for elements of a vector using the `typeof` command. For example,

```{r}
#| code-fold: false

typeof(my_num_vect)
```


While vectors are obviously useful for storing certain types of data, they are limited for most purposes because data sets like the tabular data sets we've loaded into R are made up of a mixture of different types of values. 

### Lists in R

Lists are another type of R object that do allow us to mix data types. For example

```{r}
#| code-fold: false

(my_mix_list <- list(3.14,"cat","bird"))
```

There is no type conversion unlike what we saw happen when we tried to create a vector of mixed types. Let's see what happens if we request the type for the elements in this list.

```{r}
#| code-fold: false

typeof(my_mix_list)
```

This just tells us that we have a list which we already knew. To determine the type of each list element, we can use a command such as

```{r}
#| code-fold: false

map(my_mix_list,typeof)
```

Don't worry if you don't understand the last command. Later we will look at `map` type functions which belong to the package `purrr`.   

Lists are extremely useful and many functions such as the function `map` we just used actually return a list. Two things we can do with lists are will be very useful for us in this course are:

1. Give names to the elements of a list.

2. Store vectors (and even more complicated objects) as the elements in a list. 

For example:

```{r}
#| code-fold: false

(my_vector_list <- list(my_num_vect = c(1.2,6.8,-13.9),
                       my_chr_vect = c("dog","cat","bird")))
```

Then we can access the elements in the list `my_vector_list` using the accessor operator denoted by `$`. For example

```{r}
#| code-fold: false

(my_vector_list$my_num_vect)

(my_vector_list$my_chr_vect)

```

### Data Frames in R

A data frame in R is nothing other than a list where each element of the list is a vector such that all the vectors in the list have the same length. We can create a date frame is much the same way that we just created the list that contains two vectors:

```{r}
#| code-fold: false

(my_df <- data.frame(col_a = c(1.2,6.8,-13.9),
                       col_b = c("dog","cat","bird")))
```

Notice that `my_df` contains exactly the same information that `my_vector_list` does. The only real difference is the way in which the results are displayed. 

The point of all this is just to explain that we functions like `read_csv` are used to read in tabular data, R stores the result as a data frame. Actually, since `read_csv` belongs to the `tidyverse` it reads in the data as something called a `tibble`. For our purposes, we can think of data frames and tibbles as being more or less the same things. If you want to know more about tibbles, see section 3.6 from [@wickham2019advanced], [view the section](https://adv-r.hadley.nz/vectors-chap.html#tibble). 

## Version Control and Remote Repositories

Version control systems track changes to a project over its lifespan, allow sharing and editing of code across a collaborative team, and make it easier to distribute the finished project to its intended audience. [Chapter 12](https://datasciencebook.ca/version-control.html) of [@timbers2022data] covers version control in detail. [View the chapter](https://datasciencebook.ca/version-control.html).

## Preparation for the next lesson

For the next lesson or two, we will look at some things that one commonly does with data very soon after reading it into R. That is, 

1. Manipulate or wrangle the data. 

2. Conduct an exploratory data analysis (EDA). 

Prior to starting the next lesson, please read [section 2.8](https://datasciencebook.ca/reading.html#obtaining-data-from-the-web) and [Chapter 3](https://datasciencebook.ca/intro.html) of [@timbers2022data], link [here](https://datasciencebook.ca/intro.html). 

## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)


