---
title: "Lesson 2"
subtitle: "Loading Data"
author: "JMG"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson02.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| echo: false
#| message: false
#| warning: false

# load packages used in document
library(tidyverse)
library(gapminder)
library(kableExtra)
```


## Learning Objectives

After this lesson, students will be able to: 

* Set up an RStudio project.

* Work in a Quarto document.

* Read tabular data into R.

* Use the `glimpse` command and other R functions to examine data read into R.  

## Readings, etc.

For this lesson, refer to the following readings, etc.:

* Chapter 2 of *Data Science: A First Introduction* by Tiffany Timbers, Trevor Campbell, and Melissa Lee [@timbers2022data]. [View the free online version of the text.](https://datasciencebook.ca/).

* The TidyTuesday data repository [@TT].


## RStudio Projects

A RStudio project is simply a folder or directory on a computer that contains a `.Rproj` file. A project makes it so that your work has its own working directory, workspace, history, and source documents. Using a project facilitates reproducible and auditable analyses because it keeps all the relevant files for a specific analysis together in one place making it easier to share. A RStudio project should correspond to a single project that you are working on. For example, you should use a RStudio project for your semester project for the course. 

The instructions for how to create a project are given in the online Posit support documents, [view the projects webpage](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects#:~:text=To%20create%20a\%20new%20project,extension%29%20within%20the%20project%20directory.). Alternatively, [view this video](https://youtu.be/WyrJmJWgPiU?si=qSgJRZD4YCKy3pHL):

```{r}
#| echo: false

vembedr::embed_youtube(id="WyrJmJWgPiU?si=qSgJRZD4YCKy3pHL",height=450) %>%
  vembedr::use_align("center")
```



### Some Project Tips and Tricks

1. When you create a project, the name of your project and the name of the corresponding folder will be the same so, use good naming conventions for projects. In particular, avoid the use of spaces or symbols. Make sure the name is descriptive and easy to remember but not too long. 

2. If there is data for your project, it is useful to create a subfolder of your package folder called `data` where you should save all the data files relevant to your project. 

3. If your project involves a lot of coding in R, its a good idea to create a subfolder of your package folder called `R` where you should save all the R script files relevant to your project. 

## Quarto Documents

[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is a programming practice in which the programmer includes computer code, normal text, figures, mathematical notation, etc. together into a single document. The approach is routinely in data science for the purposes of reproducible research. There are several tools for literate programming that are very popular among data scientists. These include but are not limited to [Jupyter notebooks](https://jupyter.org/) and [rmarkdown](https://rmarkdown.rstudio.com/).

A very recent addition to the literate programming toolkit is [Quarto](https://quarto.org/). Quarto brings together Jupyter notebooks, rmarkdown, and a number of other features. Throughout this course we will use Quarto which is included with the most recent versions of RStudio. To start using Quarto, we recommend:

*  Getting started with Quarto YouTube video, [watch the video on YouTube](https://youtu.be/YK6IjJkjkiI).
  
```{r}
#| echo: false

vembedr::embed_youtube(id="_f3latmOhew",height=450) %>%
  vembedr::use_align("center")
```

In class, we will go through the steps of creating a RStudio project and a Quarto document together. 

## Reading Data into R

### Basic Concepts

The main focus of this lesson is to show different common ways to read tabular data into R. Recall that tabular data is data that corresponds to a spreadsheet in which data is arranged into columns and rows. There are three basic things you need to know to read data into R:

1. The data format and file type.

For data to be tabular in structure, one must use some method to distinguish entries that belong to different columns and rows. The two most common ways are to separate entries using either a comma or a tab. Tabular data formatted using comma-separated values are saved as `.csv` files while tabular data formatted using tab-separated values are save as `.tsv` files. The other very common way to format and save tabular data is using Excel spreadsheets. 

2. Where the data is saved and will be read in from.

There are two basic locations in which one may save and store a data file: locally on a computer, remotely. To read in data that is stored locally on a computer that you have direct access to, you just need to know the path to the data file that you want to read in. To read in data that is stored remotely, you need to know the url address for the remote location of the data. 

3. The appropriate R function to use depending on the 1. and 2.

The `readr` package included as part of the `tidyverse` family of R packages contains functions `read_csv` and `read_tsv` for reading in `.csv` or `.tsv` files, respectively. The `readxl` package contains functions that can be used to read in tabular data formatted and saved as Excel spreadsheets. 

**Note:** There are also many other data structures, file types, and R packages or functions for reading in data. We can't possibly cover all the possible variations in class but once you know how to read in one data type into R, it is usually straightforward to figure out how to do it with some other data or file type. 

### Examples

The following examples assume that you are working in an active RStudio project that contains a subfolder titled `data` and that you have downloaded and saved the files `happiness_report.csv` and `happiness_report.xlsx` to the data folder. These are all data files for tabular data that ranks countries on happiness based on rationalized factors like economic growth, social support, etc. The data was released by the United Nations at an event celebrating International Day of Happiness. 

Before we can read these data files into R, we need to make sure that we install and load `readr` and `readxl`. Remember that `readr` is part of the `tidyverse` which we have already installed so you probably only need to install `readxl`. Once you have done this, you can create and run an R code chunk with the following:

```{r}
#| warning: false
#| message: false
#| echo: true
#| code-fold: false


# load necessary packages
library(tidyverse)
library(readxl)
```



Notice that we have assigned our data to a variable after having read it in. 

## Some Data Sources

Appendix B of the online textbook contains a very helpful list of data sources [@alexandertelling]. [View appendix B](https://tellingstorieswithdata.com/21-datasets.html). Two other very interesting and useful sources of data are the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) data repositories and [Kaggle](https://www.kaggle.com/). There are also many R packages that either include data or that can be used to download data. The ROpenSci project is a godo resource for finding R packages that can be used to obtain data, [view the project](https://ropensci.org/).

## `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` Vectors, Lists, and Data Frames



## Version Control and Remote Repositories



## Preparation for the next lesson

Prior to starting the next lesson, please read [Chapter 3](https://datasciencebook.ca/intro.html) of [@timbers2022data], link [here](https://datasciencebook.ca/intro.html). 

## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)


