---
title: "Lesson 1"
subtitle: "Getting Into Data"
author: "JMG"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson01.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| echo: true
#| message: false
#| warning: false

# load packages used in document
library(tidyverse)
```


## Learning Objectives

After this lesson, students will be able to: 

* Give a general definition of **data science**.

* Explain what is meant by **reproducible** and **auditable** workflows.

* Use the [Gapminder](https://www.gapminder.org/) online tools (link [here](https://www.gapminder.org/)) to explore data on certain social and economic issues.

* Explain and give examples of **numerical** and **categorical** data types.  

* Do basic arithmetic with R. 

## Readings, etc.


For this lesson, refer to the following readings, etc.:

* Read the preface of *Data Science: A First Introduction* by Tiffany Timbers, Trevor Campbell, and Melissa Lee [@timbers2022data]. This textbook is available online [here](https://datasciencebook.ca/).

* Skim the README for the [Tidy Tuesday data repository](https://github.com/rfordatascience/tidytuesday) [@TT]. Click [link here](https://github.com/rfordatascience/tidytuesday) to go to the Tidy Tuesday data repository. Throughout the semester, we will use example data from the Tidy Tuesday data repository.


## What is Data Science?

@fig-reproducible illustrates the concept of reproducibility. 

[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/rstats-artwork/reproducibility_court.png?raw=1){#fig-reproducible fig-alt="An illustration of the concept of reproducibility."}](https://allisonhorst.com/)

## Exploring Data: An Introduction Through Gapminder 



## Classification of Basic Data Types

[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/other-stats-artwork/continuous_discrete.png?raw=1){#fig-numericals fig-alt="An illustration of the distinction between a continuous numerical variable and a discrete numerical variable."}](https://allisonhorst.com/)


[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/other-stats-artwork/nominal_ordinal_binary.png?raw=1){#fig-categoricals fig-alt="An illustration of the distinction between nominal, ordinal, and binary categorical variables."}](https://allisonhorst.com/)

## A Tiny Bit of R

[![Artwork by Allison Horst](https://github.com/allisonhorst/stats-illustrations/blob/main/rstats-artwork/exploder.gif?raw=1){fig-alt="A gif showing the logo for the R language for statistical computing."}](https://allisonhorst.com/)

### Why R?

The [R language](https://www.r-project.org/) [@r2023] for statistical computing is one of the most popular computing tools for data science, among the other [most popular](https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022) are [Python](https://www.python.org/) and [Julia](https://julialang.org/). Some of the strengths of R include

* free and open source which facilitates reproducibility and auditability, 

* ecosystem of packages that greatly extend the functionality of R,

* [rmarkdown](https://rmarkdown.rstudio.com/) [@rmarkdown2020] and [Quarto](https://quarto.org/) frameworks for [literate programming](https://en.wikipedia.org/wiki/Literate_programming) enable presentation and communication of data analyses and facilitate reproducibility and auditability, 

* [RStudio](https://posit.co/download/rstudio-desktop/) [integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment) (IDE) by [Posit](https://posit.co/) enhances programming, RStudio also supports other languages like Python and Julia making it possible to work across different languages, 

* a strong and collaborative user community, see R Community Explorer website [here](https://r-community.org/usergroups/). 

As the course progresses, we will learn a lot of R. For this lesson, we will start with something very simple, that is, doing basic calculations with R. 

### Calculations with R

In R, it is easy to perform basic arithmetic operations such as addition, subtraction, multiplication, division, exponentiation, and modular division. Each of these is illustrated in the following code blocks:

```{r}
#| code-fold: false


# any line starting with # is a comment and is not run
# addition
1.6 + 2.31
```


```{r}
#| code-fold: false


# subtraction
4.87 - 2.31
```



```{r}
#| code-fold: false


# multiplication
1.6 * 2.31
```


```{r}
#| code-fold: false


# division
6.0 / 2.31
```


```{r}
#| code-fold: false


# exponentiation
2^3
```


```{r}
#| code-fold: false


# modular division, a %% b returns the remainder after
# dividing a by b

7 %% 2
```


You have to be careful with the order of operations, use parentheses to be precise about intended order of operations. For example,

```{r}
#| code-fold: false

(6 / 3) - 1
```

divides 6 by three and then subtracts 1, while

```{r}
#| code-fold: false

6 / (3 - 1)
```

subtracts 1 from 3 and divides 6 by the result. While the following code runs and has a specific meaning to the computer, it is ambiguous to the human reader and should be modified appropriately with parentheses:

```{r}
#| code-fold: false

6 / 3 - 1
```


### Variables and Assignment

In R programming, a variable is a name given to a R object such as a numeric value that can be used to store, reuse, or modify that object. In R, variable assignments are made use the assignment operator `<-`. For example, 

```{r}
#| code-fold: false

my_variable <- 2.5
```

assigns the numeric value 2.5 to the variable `my_variable`. Now, we can peform operations to `my_variable`, for example, 

```{r}
#| code-fold: false

(2 * my_variable)

(my_variable^3)

```

Many programming languages use `=` for assignment. While it is valid to use `=` in R, best practices dictate using `<-`.   

See the tidyverse style guide [here](https://style.tidyverse.org/syntax.html) for best practices in naming objects in R. 

If you want to engage further with R programming, we highly recommend the [swirl](https://swirlstats.com/) package [@swirl2020] for learning R in R. To install, load, and use swirl, run the following commands in the R console:

```{r}
#| echo: true
#| code-fold: false
#| eval: false

# install swirl
install.packages("swirl") # only need to run once
# load swirl 
library(swirl) # must run in every new R session
# start swirl
swirl()
```

## Preparation for the next lesson


## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)

