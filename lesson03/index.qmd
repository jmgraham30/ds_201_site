---
title: "Lesson 3"
subtitle: "Data Wrangling"
author: "JMG"
format:
  html:
    echo: true
    code-fold: false
    code-summary: "Show the code"
    toc: true
    toc-location: left
bibliography: lesson03.bib
license: "CC BY-NC-SA 4.0"
---

```{r}
#| echo: false
#| message: false
#| warning: false

# load packages used in document
library(tidyverse)
library(readxl)
library(gapminder)
library(kableExtra)

theme_set(theme_minimal(base_size=12))

# read in data files
#happiness_report_csv <- read_csv("https://raw.githubusercontent.com/UBC-DSCI/data-science-a-first-intro-worksheets/main/worksheet_reading/data/happiness_report.csv")
#happiness_report_xl <- read_xlsx("/Users/jasongraham/Library/CloudStorage/Dropbox/WorkDocuments/Teaching/Falls/Fall2023/DS 201/happiness_report.xlsx")
```


## Learning Objectives

After this lesson, students will be able to: 

* Use the `dplyr` functions  `select` and `filter` to manipulate rows and columns of a data frame. 

* Use the `mutate` function to add new columns to a data frame. 

* Use `group_by` to group observations in one or more columns of a data frame by a grouping variable. 

* Use the `summarize` function with the `group_by` function to compute grouped summaries. 

* Use `pivot_longer` and `pivot_wider` functions to perform certain types of reorganizations of a data frame. 

* Use the `join` family of functions to combine separate data sets into one. 

## Readings, etc.

For this lesson, refer to the following readings, etc.:

* Chapter 3 of *Data Science: A First Introduction* by Tiffany Timbers, Trevor Campbell, and Melissa Lee [@timbers2022data]. [View the free online version of the text.](https://datasciencebook.ca/).

* Chapter 5 of *R for Data Science* by Wickham and Grolemund [@wickham2023r]. [View the chapter online](https://r4ds.had.co.nz/transform.html)


## Overview

Real world data rarely comes in exactly the right form for the analysis you want to do. This has led to the implementation of methods that facilitate manipulating data in a way that allows us to more easily address some of the common problems with data sets. In this lesson, we will introduce such methods which include but are not limited to 

* selecting certain rows or columns of tabular data,

* creating new variables or columns, often by transforming existing ones,

* grouping or arranging observations,

* reshaping parts of the data,

* joining multiple tabular data sets.

A particularly common application of these methods is to get data into an appropriate shape required for a particular type of plot, visualization, or summary. 

The R package `dplyr` which belongs to the `tidyverse` family of packages is one of the available implementations of the common data manipulation methods [@dplyr]. The `dplyr` package is robust, well-documented, easy-to-use, and efficient so we will explore it in this lesson. It is worth while to take a moment to visit the ['dplyr' website](https://dplyr.tidyverse.org/) as it contains helpful information and resources, [view the webpage](https://dplyr.tidyverse.org/). 

## Data For the Lesson

In this lesson, we will make use of a few data sets. This includes:

* The Gapminder data set which is available in R through the `gapminder` package. To refresh our memories, let's examine the first few rows of the Gapminder data:

```{r}
#| echo: false


gapminder %>%
  head() %>%
  kable()
```


* Data from the `nycflights13` package which we load (make sure the package is installed) using

```{r}
#| code-fold: false

library(nycflights13)
```

We can see a list of the data available in the `nycflights13` package with the command

```{r}
#| eval: false
#| code-fold: false

data(package="nycflights13")
```

which produces a table with the following information:

| Name of Data Set | Information  |
|------------------|:--------------|
| `airlines`       | Airline names |
| `airports`       | Airport metadata |
| `flights`        | Flights data |
| `planes`         | Plane metadata |
| `weather`        | Hourly weather data |

For example, the `flights` data has first few rows

```{r}
#| echo: false

flights %>%
  head() %>%
  kable()
```

## `r icons::icon_style(icons::fontawesome("r-project"),scale=2,fill="steelblue")` The `dplyr` Package

The [`dplyr` package](https://dplyr.tidyverse.org/) consists of a set of functions that help you solve the most common data manipulation challenges [@dplyr]. Before discussing the individual functions, itâ€™s worth listing what they have in common:

1. The first argument is always a data frame.

2. The subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).

3. The output is always a new data frame.

Now we will give examples of the typical use for the common `dplyr` functions:

### Selecting Columns

The `select` function extracts specified columns from a data frame:

```{r}
gapminder %>%
  select(country,year,lifeExp)
```

You can also specify which columns you don't want:

```{r}
gapminder %>%
  select(-continent)
```


**Exercise:** Select the columns `dep_delay` and `carrier` from the `flights` data set. Select all the columns in the `flights` data set except `year`, `month`, and `day`.


### Filtering Rows

The `filter` function retains all rows of a data frame according to some specified condition(s).

```{r}
gapminder %>%
  filter(country == "Spain")
```

Notice that to specify equality for a condition in `filter` one must use the double equals `==`. 

Here are some other variations using `filter`:

```{r}
gapminder %>%
  filter(country == "Spain" | country == "Portugal")
```

```{r}
gapminder %>%
  filter(year >= 1979)
```

```{r}
gapminder %>%
  filter(year >= 1979 & country == "Spain")
```



**Exercise:** Use `filter` to select those observations in the `flights` data that had a departure from JFK airport. Use `filter` to select those observations in the `flights` data that had a departure from JFK airport and the airline (carrier) is United Airlines (UA). Use `filter` to extract those observations where there was a departure delay that was an hour or more. 


### Grouping

The `group_by` function allows us to group observations in a data frame by one or more grouping variables. The syntax for `group_by` is:


```{r}
gapminder %>%
  group_by(year)
```

or for more than one variable:

```{r}
gapminder %>%
  group_by(country,year)
```

By itself, `group_by` isn't very useful. However, used with other functions it can be extremely useful. For example, we can combine `group_by` and `summarise` to create grouped summaries:

```{r}
gapminder %>%
  group_by(year) %>%
  summarise(mean_lifeEx = mean(lifeExp))
```

Here is another example:

```{r}
flights %>%
  filter(dep_delay >= 1) %>%
  group_by(carrier) %>%
  summarise(n_carrier = n())
```

This tells us the number of times each carrier has a departure delay of at least an hour. We can add the `arrange` function to put these in order:

```{r}
flights %>%
  filter(dep_delay >= 1) %>%
  group_by(carrier) %>%
  summarise(n_carrier = n()) %>%
  arrange(n_carrier)
```

or if we want the opposite order:

```{r}
flights %>%
  filter(dep_delay >= 1) %>%
  group_by(carrier) %>%
  summarise(n_carrier = n()) %>%
  arrange(desc(n_carrier))
```


**Exercise:** Use `group_by` and `summarise` to compute the average departure delay by carrier. Use `group_by` and `summarise` to find the number of times each airport has had departure delays of an hour or more, use `arrange` to place the airports with the most departure delays at the top. 


We can group by more than one variable:


```{r}
gapminder %>%
  group_by(year,continent) %>%
  summarise(continent_count = n())
```

and also summarise more than one variable after grouping. 

```{r}
gapminder %>%
  group_by(year,continent) %>%
  summarise(continent_count = n(),
            mean_lifeExp = mean(lifeExp))
```

We will spend a lot of time later talking about plots and visualizations. Just to see what is possible, let's make a plot using the results of a grouped summary: 


```{r}
#| label: fig-grouped
#| fig-cap: A plot made using data obtained from a grouped summary. 

a_grouped_summary <- gapminder %>%
  group_by(year,continent) %>%
  summarise(continent_count = n(),
            mean_lifeExp = mean(lifeExp))

a_grouped_summary %>%
  ggplot(aes(x=year,y=mean_lifeExp,color=continent)) + 
  geom_point() + 
  geom_line()
```


**Exercise:** Modify the code in the last code chunk to make a plot of the average departure delay by airport per each day. That is, the x-axis should be the day, the y-axis should be the average departure delay and the colors should distinguish the different airports. **Hint:** When you compute the mean, you will have to add an extra argument, `na.rm=TRUE` because there are missing values in the data. 


### Reshaping

Typically, we want our data to be in **tidy** format. This means

1.  Each variable is a column; each column is a variable.
2.  Each observation is a row; each row is an observation.
3.  Each value is a cell; each cell is a single value.

@fig-tidy-structure shows the rules visually.

```{r}
#| label: fig-tidy-structure
#| echo: false
#| fig-cap: | 
#|   The following three rules make a dataset tidy: variables are columns,
#|   observations are rows, and values are cells. Illustration credit:
#|     https://github.com/hadley/r4ds/blob/main/images/tidy-1.png
#| fig-alt: | 
#|   Three panels, each representing a tidy data frame. The first panel
#|   shows that each variable is a column. The second panel shows that each
#|   observation is a row. The third panel shows that each value is
#|   a cell.

knitr::include_graphics("https://www.dropbox.com/scl/fi/rpmts436umhwm2wqvqxsi/tidy-1.png?rlkey=uvf6pcb0xx0j0y52xm0bxvd61&dl=1", dpi = 270)
```

Often, getting data into tidy format requires reshaping the data. But there maybe reasons to reshape the data from tidy format to another format. The `pivot_longer` and `pivot_wider` functions facilitate these types of reshaping. 

For example, suppose that for some reason we want to view the life expectancy for each country in the Gapminder data so that the values for each year are in their own column. This can be achieved with `pivot_wider`:

```{r}
gapminder %>%
  select(country,year,lifeExp) %>%
  pivot_wider(names_from = "year",values_from = lifeExp)
```

As an application, we can use such data to make a table like the following one:

```{r}
gapminder %>%
  select(country,year,lifeExp) %>%
  pivot_wider(names_from = "year",values_from = lifeExp) %>%
  select(country,`1952`,`2007`) %>%
  filter(country %in% c("Spain","Portugal")) %>%
  kable()
```

**Exercise:** Use `pivot_wider` to create a data frame starting with the Gapminder data that has the population values for each country but with each year as its own column. 

**Exercise:** Explain what the following command does:

```{r}
#| eval: false

flights %>% 
  pivot_wider(names_from = origin,values_from = distance)
```

The `billboard` data set records the billboard rank of songs in the year 2000:

```{r}
billboard %>%
  head() %>%
  kable()
```


In this dataset, each observation is a song. The first three columns (`artist`, `track` and `date.entered`) are variables that describe the song. Then we have 76 columns (`wk1`-`wk76`) that describe the rank of the song in each. Here, the column names are one variable (the `week`) and the cell values are another (the `rank`).


To tidy this data, we'll use `pivot_longer()`:

```{r}
billboard %>%
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )
```

**Exercise:** Consider the `diamonds` data set from the `ggplot2` package which is part of the `tidyverse`. The first few rows of the `diamonds` data looks as follows:

```{r}
#| echo: false


diamonds %>%
  head() %>%
  kable()
  
```


Apply the `pivot_longer` function to the `diamonds` data to combine the `x`, `y`, and `z` columns into a single column. 


To see that `pivot_longer` and `pivot_wider` are inverses of one another, examine the following code:

```{r}
gapminder %>%
  select(country,year,lifeExp) %>%
  pivot_wider(names_from = "year",values_from = lifeExp) %>%
  pivot_longer(cols=-c("country"),names_to = "year", values_to = "lifeExp")
```



Pivoting is covered in more detail in Chapter 6 of [@wickham2023r].

## Preparation for the next lesson

For the next lesson we will begin discussing the exploratory data analysis (EDA) process starting with some data visualization. 

Prior to starting the next lesson, please read [Chapter 4](https://datasciencebook.ca/intro.html) of [@timbers2022data], link [here](https://datasciencebook.ca/intro.html). 

## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


[![](http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png?raw=1){fig-align="left" width=15%}](https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode)


